▪ Что такое функция?
Функция — участок кода, который можно вызвать на
исполнение.
У функции могут быть: имя, параметры, возвращаемое
значение, тело.
Настоятельно рекомендуется использовать аннотацию типа
для параметров функций. Это повышает читаемость кода.
▪ Что обязательно должно быть у функции, а что нет?
def в начале и : в конце
Параметр — это имя в списке параметров в первой строке определения функции. Он получает свое значение при вызове. Аргумент — это реальное значение или ссылка на него, переданное функции при вызове. В этой функции:

def sum(x, y):
    return x + y
x и y — это параметры, а в этой:

sum(1, 2)
1 и 2 — аргументы.

▪ Можно ли передать функцию, как параметр?
Функцию можно передавать как параметр в другую
функцию:
В этом примере для указания типа параметра у
функции main_function был использован
typing.Callable.
Модуль typing используется для аннотаций типов,
как Callable, Tuple, Union, TypeVar. Подробнее про
typing и про то, какие стандарты PEP он
исполняет:
https://docs.python.org/3/library/typing.html
▪ Как можно передать в функцию неограниченное число параметров?
Лямбда-функции - это функции записанные одной
строкой. Они, как и обычные функции, принимают
аргументы, обрабатывают их и возвращают
результат обработки.
Лямбда — безымянная функция, которая
принимает сколько угодно параметров, но имеет в
теле только одно выражение.
*args и **kwargs позволяют передавать неизвестное заранее количество параметров в функцию.
Они отличаются друг от друга наличием ключевых слов у аргументов.
*args позволяет передавать в функцию произвольное число аргументов не указывая их ключевых слов.
**kwargs — это словарь параметров. С ним можно работать, как со словарём.
**kwargs позволяет передавать в функцию произвольное число аргументов с обязательным указанием их ключевых слов.
▪ Что такое магический метод?
Список доступных для объекта методов можно
посмотреть использовав функцию dir().
В списке методов можно найти методы,
отделенные с двух сторон двумя
подчеркиваниями. Они называются магическими.
Магические методы позволяют понять, как
интерпретатор python будет работать с разными
объектами.
▪ Какие есть области видимости?
Есть три типа контекста для переменных.
Глобальный контекст означает, что переменная доступна в любом месте программы.

В отличие от глобальных переменных, локальная переменная определяется внутри функции.
Локальная переменная доступна только из этой функции - имеет локальную область видимости.

Область видимости может быть "нелокальной".
Такое может происходить когда вы пишете функцию внутри функции
▪ Назовите признаки функции первого класса
В python каждая функция - первого класса.
Объект первого класса обладает следующими признаками:
может быть сохранен в переменной или структурах данных;
может быть передан в функцию как аргумент;
может быть возвращен из функции как результат;
может быть создан во время выполнения программы;
внутренне самоопознаваем (независим от именования).