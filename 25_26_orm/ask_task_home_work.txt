Что такое ORM?
ORM — Object Relation Mapping или объектнореляционное преобразование. Использование
библиотеки, реализующей концепт ORM позволяет в коде
писать запросы в реляционные базы данных без
использования sql-запросов. Вместо них используется
объектно-ориентированная парадигма.

2) В каких случаях стоит использовать ORM?
Использование orm позволяет держать модель с данными
в одном месте и не заставляет писать длинные sqlвыражения в коде, что делает код с подключениями к бд
отлаживаемым. ORM повсеместно используется в
больших компаниях при написании серьёзного кода.

3) Как в sqlalchemy создать модель?
# Класс, описывающий одну из таблиц БД. Такой класс называется моделью.
class Player(Base):
 __tablename__ = 'players' # имя таблицы
 # Атрибуты класса описывают колонки таблицы, их типы данных и ограничения
 identifier = Column(Integer, primary_key=True, comment="Идентификатор игрока")
 nickname = Column(String(25), unique=True, comment="Никнейм игрока")
 character_race = Column(String, comment="раса персонажа")
 character_class = Column(String, comment="класс персонажа")
 character_passive_ability = Column(String, comment="пассивная абилка персонажа")

4) Как используется сессия в sqlalchemy?
Сессия обеспечивает выполнение query на указанной бд используя
текущее подключение.
Метод commit() позволяет исполнить query. Метод rollback()
используется для отмены изменений.
Sessionmaker — это фабрика, позволяющая создавать класс сессий.
Из класса сессий можно создать конкретный объект сессии, который
позволяет работать с записями в таблицах.
При вызове commit() осуществляется вызов flush(), если его
автоматический вызов не отключить при настройке сессии. Flush
записывает все ожидающие создания, удаления и изменения
объекты в базу данных в виде sql-инструкций INSERT, DELETE,
UPDATE и т. д. Порядок выполнения операций автоматически
определяется внутри сессии.
Rollback() обрывает текущую транзакцию в БД, не давая сделать
изменения в записях. Отмена транзакции может вызваться
автоматически, например, во время ошибки при flush.
При закрытии сессии вызовите метод close() у объекта сессии.